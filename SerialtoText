# SerialtoText reads in the serial lines via the serial port and saves the values (as integers) into a txt file

# Import libraries to connect python script with arduino serial monitor
import serial
import numpy as np
import re  

# NOTE: While this is running, you can not re-program the Arduino. You must exit 
# this Python program before downloading a sketch to the Arduino.

# Set the name of the serial port
arduinoComPort = "COM5"

# Set the baud rate
# NOTE: The baudRate for the sending and receiving programs must be the same!
baudRate = 9600

# Creating data arrays for sensor1, sensor2, and motor speeds
sensor1 = []
sensor2 = []
leftspeed = []
rightspeed = []

# Open the serial port
serialPort = serial.Serial(arduinoComPort, baudRate, timeout=1)
# Keep reading in each line in the Serial until the user initiates
# KeyboardInterrupt with CTRL-C
try:
  while True:
    # Obtain serial line    
    lineOfData = serialPort.readline().decode()
    # Make sure it isn't empty or just a newline
    if len(lineOfData) > 0 and lineOfData != "\n":
      # Split the serial line by commas into sensor1, sensor2, leftspeed, and rightspeed values
      temp = [value.strip() for value in lineOfData.split(',')]
      # Only add data to arrays when three values are extracted
      if len(temp) == 4:
        # Convert string into integer and append
        sensor1.append(int(float(re.sub("\D", "", temp[0]))))
        sensor2.append(int(float(re.sub("\D", "", temp[1]))))
        leftspeed.append(int(float(re.sub("\D", "", temp[2]))))
        rightspeed.append(int(float(re.sub("\D", "", temp[3]))))

# Completed when CTRL-C pressed
except KeyboardInterrupt:
  # Save sensor1, sensor2, leftspeed, and rightspeed data as columns in a text file
  np.savetxt('twosensor_data.txt', np.transpose([sensor1, sensor2, leftspeed, rightspeed]))